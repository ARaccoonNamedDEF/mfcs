--@name mfcs_content/Official Documentation
--@author DEF

-- Common
do
    --[[
        MFCS:GetGraphicsModule()
            Gets GraphicModule, not really useful for much
                returns mfcs.graphicsmodule
        
        Module:GetAPI()
            Gets API, very useful or a lot of things
            I recommend caching this somewhere on CLIENT after startup
                returns mfcs.api
        
        MFCS:AddSharedInput(string InputName, string InputType)
            Makes an input, value is also networked to CLIENT
                returns nothing
        
        MFCS:AddSharedOutput(string OutputName, string OutputType)
            Makes an output, you can also "write" to this from CLIENT using [API:SetOutput]
                returns nothing
    ]]
end

-- Event functions
do
    --[[
    All of these only run on CLIENT, you're free to define them on SERVER too
    Meant to be called by MFCS
    
    API.OnInitialize = function() ... end
        Called on first startup before asking permissions
        Great for requesting additional permissions
    
    API.OnAuthorize = function() ... end
        Called on first startup after obtaining permissions
    
    API.OnEnterChair = function() ... end
        Called on player entering chair
    
    API.OnExitChair = function() ... end
        Called on player exiting chair
    
    API.OnKey = function(Key, Down) ... end
        Called on player keystroke
    
    API.OnUpdate = function() ... end
        Called on "frame" update / RefreshRate
    
    API.OnReceiveNet = function() ... end
        Called on receiving network vars / NetworkRate (inbound)
    
    API.OnSendNet = function() ... end
        Called on sending network vars / NetworkRate (outbound)
    ]]
end

-- MFCS.Graphic functions
do
    --[[
    GraphicsModule:AddGraphic(boolean NoTexture = false)
        Makes a graphic object
        Giving 'true' will not make a texture for this item, useful texture atlas
            returns mfcs.graphic Graphic
    
    Graphic:SetCameraTags(table(string) CameraTags)
        Makes graphic only render with matching cameras
        Usually passed in by Interface
    
    Graphic:SetLayer(number Layer)
        Makes graphic render on numeric layer
        I recommend only setting this one-time because of how sorting works
    
    Graphic:SetUpdate(??? UpdateEnum)
        Controlls when Graphic.RefreshFunc is called
            GraphicsModule.UPDATE.STATIC = on player entering chair
            GraphicsModule.UPDATE.FRAME = on "frame" update / RefreshRate
            GraphicsModule.UPDATE.NETWORK = on receiving network vars / NetworkRate (inbound)
            GraphicsModule.UPDATE.SIGHT = on camera fov change, range change, weapon loaded munition change
    
    Graphic:ResetMaterial()
        Resets the texture and material
        Useful if you're having weird drawing behavior after drawing something else in Graphic.DrawFunc
    
    Graphic.DrawFunc = function() ... end
        Instructions for rendering this graphic
        Usually you put [render.drawTexturedRect] in here
        Meant to be called by MFCS
    
    Graphic.RefreshFunc = function() ... end
        Instructions for writing onto texture, if this graphic has one
        Usually you wipe the texture first with [render.clear] in here
        Will still run if you need to do other things during Update
        Meant to be called by MFCS
    ]]
end

-- Rendering functions
do
    --[[
    API:DrawText(number ScaleX, number ScaleY, number PosX, number PosY, string Text, TEXT_ALIGN Align, VMatrix Matrix = nil, boolean Absolute = false)
        Draws scaled text
        Includes option to specify matrix & absolute to avoid pushing too many matrices
            returns nothing
    
    API:DrawTextInBox(number PosX, number PosY, number Width, number Height, string Text, TEXT_ALIGN Align, number Padding = 0, VMatrix Matrix = nil, boolean Absolute = false)
        Draws text fitting in an imaginary box
        Includes option to specify matrix & absolute to avoid pushing too many matrices
            returns nothing
    
    API:GetCursorAimMatrix()
        Matrix to position cursor
            returns vmatrix Cursor
    
    API:GetCursorPointer(Number MixRatio, boolean DoRotation = false)
        Matrix to position cursor
            returns vmatrix Pointer, number Distance
    
    API:GetWeaponAimMatrix(string WeaponName, boolean AccountForDrop = false)
        Position weapon sight
            returns vmatrix Sight
    
    API:GetMunitionDropMatrices(mfcs.munition Munition)
        Marks for rangetable sight
            returns table(vmatrix) DropMarks
                default = {}
    
    API:GetComputerPosMatrix()
        Matrix to position rangefinder lock
            returns vmatrix LockedPos
    
    API:GetAngleDelta(entity Target, number ComponentIndex, angle Alignment, number DefaultReturn = 0)
        Difference in angle component from camera to Target entity
            returns number AngleDelta
                default = DefaultReturn
    ]]
end

-- Armament & Munition properties
do
    --[[
    API:GetGunReady(string WeaponName)
        returns boolean Ready
            default = false
    
    API:GetGunState(string WeaponName)
        returns string State
            default = "Empty"
    
    API:GetGunReloadProgress(string WeaponName)
        returns number ReloadProgress
            default = 1
    
    API:GetGunReloadTime(string WeaponName)
        returns number(seconds) ReloadTime
            default = 0
    
    API:GetGunReloadTimeLeft(string WeaponName)
        returns number(seconds) ReloadTimeLeft
            default = 0
    
    API:GetGunTOF(string WeaponName)
        returns number(seconds) TimeOfFlight
            default = 0
    
    API:GetGunMagRounds(string WeaponName)
        returns number RoundsLeft
            default = 0
    
    API:GetGunMagSize(string WeaponName)
        returns number MagCapacity
            default = 1
    
    API:GetGunSelectedName(string WeaponName)
        returns string SelectedMunitionName
            default = "None"
    
    API:GetGunLoadedName(string WeaponName)
        returns string LoadedMunitionName
            default = "Empty"
    
    API:GetGunSelectedMunition(string WeaponName)
        returns mfcs.munition SelectedMunition
            default = table {}
    
    API:GetGunLoadedMunition(string WeaponName)
        returns mfcs.munition LoadedMunition
            default = table {}
    
    API:GetGunMunitions(string WeaponName)
        returns table(mfcs.munition) Munitions
            default = table {}
    ]]
end

-- Miscellaneous functions
do
    --[[
    API:GetInput(string InputName)
        returns var InputValue
    
    API:GetOutput(string OutputName)
        returns var OutputValue
    
    API:SetOutput(string OutputName, var NewValue)
        returns nothing
    
    API:GetCameraFOV()
        returns number FieldOfView
    
    API:GetCameraMagnification()
        returns number Magnification
    
    API:GetComputerRange()
        returns number(inches/GMU) Range
    
    API:GetComputerLocked()
        returns boolean IsLocked
    
    API:GetComputerManualRanging()
        returns boolean IsManualRanging
    
    API:GetMaterial()
        Get material used for rendering (there is only one)
            returns material Material
    
    API:ResetMaterial()
        Resets the rendering material, doesn't cleanup everything
        Usually best to make sure you set back whatever flag you changed
            returns nothing
    
    API:GetRefreshRate()
        returns number(frames per second) RefreshRate
    
    API:GetTextureCount()
        Gets number of reserved render targets
        Will always give +2 because of coincidence rangefinder
            returns number RenderTargets
    ]]
end

-- MFCS.StencilUnit functions
do
    --[[
    API:GetStencil()
        StencilUnit, pretty useful for masking
        I recommend caching this somewhere on CLIENT after startup
            returns mfcs.stencilunit StencilUnit
    
    StencilUnit.Draw = function() ... end
        Graphic function to be clipped by StencilUnit.Mask
        Meant to be called by MFCS
    
    StencilUnit.Mask = function() ... end
        Graphic function that acts as clip for StencilUnit.Draw
        Meant to be called by MFCS
    
    StencilUnit:InvertedMasked()
        Draws StencilUnit.Draw with StencilUnit.Mask removed from it
            returns nothing
    
    StencilUnit:Masked()
        Draws StencilUnit.Draw with only StencilUnit.Mask rendered
            returns nothing
    ]]
end

-- MFCS.Munition functions
do
    --[[
    MFCS.Munition types are usually accessed from an Armament
        I.E.
            API:GetGunSelectedMunition(string WeaponName)
            API:GetGunLoadedMunition(string WeaponName)
            API:GetGunMunitions(string WeaponName)
    
    Check to make sure you have a valid Munition object with table.isEmpty(Munition)
    
    Munition:GetName()
        returns string Name
    
    Munition:GetFlightData()
        returns table(FlightEntry) FlightData
            FlightEntry format: { Range = number(meters), Drop = number(meters), Time = number(seconds) } 
    
    Munition:GetMaxRange()
        returns number(inches/GMU) MaxRange
    
    Munition:GetAmmoCount()
        returns number AmmoCount
    
    Munition:GetSelected()
        returns boolean IsSelected
    
    Munition:GetLoaded()
        returns boolean IsLoaded
    ]]
end
